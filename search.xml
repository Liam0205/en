<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Declaration and Definition of Virtual Member Functions in C++]]></title>
    <url>%2Fen%2F2019%2F01%2F11%2Fvirtual-member-function-declaration-and-definition-in-Cxx%2F</url>
    <content type="text"><![CDATA[Polymorphism is one of the most important feature of OOP. C++ implements polymorphism by the combination of virtual member functions and pointers (references). As a C++ user, of course you know how to use virtual member function and pointers (references) to achive polymorphism. But there might be a fuzzy zone left around these concepts. For example, have you ever think about the following question? Can a pure virtual function has a implementation? This post discuss declaration and definition of virtual member functions in C++. Short Answer to the QuestionYes, we could give a definition of a pure virtual function, and sometimes we must give such a definition. But remember, unlike other member functions, the definition of a pure virtual member function should be implemented outside the definition of the class contains it. (see the example below) 12345678910111213141516171819struct Abstract &#123; virtual void f() = 0; // pure virtual ~Abstract() &#123; // f(); // undefined behavior Abstract::f(); // OK: non-virtual call &#125;&#125;;// definition of the pure virtual functionvoid Abstract::f() &#123; std::cout &lt;&lt; "A::f()\n"; &#125;struct Concrete : Abstract &#123; void f() override &#123; Abstract::f(); // OK: calls pure virtual function &#125; ~Concrete() &#123; f(); // OK: calls Concrete::f() &#125;&#125;; Virtual Member FunctionsHere, we begin to discuss the rules about declaration and definition of virtual member functions. According to the C++ standard, a virtual member function declared in the definition of a class must have a definition (implementation). Remember that, when you are trying to give implementation of a virtual member function, you cannot mark virtual again outside the class definition. 12345678910111213struct Foo &#123; virtual void foo() &#123; // declare and define at the same time, inside the class definition. std::cout &lt;&lt; "Foo::foo()" &lt;&lt; std::endl; &#125;&#125;;struct Bar &#123; virtual void bar();&#125;;void Bar::bar() &#123; std::cout &lt;&lt; "Bar::bar()" &lt;&lt; std::endl;&#125; However, this rule is not required to give a diagnose when compiling. That is to say, if the definition of a virtual member function is missing, your compiler may not report an error. However, your linker might report it for referancing undefined symbol. Pure Virtual Member FunctionsPure virtual functions mark classes who contain them as “abstract class”. It means that no objects of an abstract calss could be created, and we cannot use it as parameter types, as function return types, or as the type of an explicit conversion. As a result, we’ll never have a chance to call virtual member functions declared in an abstract class from its object. On the other hand, since it’s a pure virtual function and will defintely be overrided in dirved classes. In consquence, in most cases, impl of pure virtual function is useless. Therefore, we can declare a function as pure function and give no definition of it. That is to say, for pure virtual member function, we could: declare it in class definition, and give no implementation of it; declare it in class definition, and do give implementation of it outside the class definition. But remember, there are two exceptions. for pure virtual destructor, you’ll have to provide a definition. the member functions of the derived class are free to call the abstract base’s pure virtual function using qualified function id (Base::some_pure_virtual_function()). In these two cases, definition of pure virtual function makes sense.]]></content>
      <categories>
        <category>Algorithm and Computer Science</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Virtual Member Function</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Popular Romance of Game Theory: the Pirate Dividend issue and Trump's Campaign]]></title>
    <url>%2Fen%2F2019%2F01%2F08%2Fthe-Pirate-Dividend-issue-and-Trump-Campaign%2F</url>
    <content type="text"><![CDATA[Starting from this post, we are gonna talking about Game Theory. Thus the name ‘Popular Romance of Game Theory’. This is the first post of them, and we’ll begin with the Pirate Dividend issue. The Pirate Dividend issueThe issue decriptionThe Pirate Dividend issue is decripted as follow: Three smart pirates, say A, B, and C, were assigning 100 gold coins robbed. Since there isn’t any agreement about how to assign the coins, they decided to make a division scheme in the following process, which is directed by ‘the god of pirates’: In the order of A, B, and C, a proposal should be presented in turn. Those pirates who are still alive, vote on the proposal just proposed: If the proposal is approved by more than half (not included), the proposal will be the scheme, and the game stops; Else, the pirate who proposed the proposal will be thrown to the sea to feed sharks, immediately, and the pirates left continue to propose their proposals. In this game, we suppose that pirates are always cautious and greedy: They always want to save their lives first; They always want to get as many gold coins as possible; In the case of equal amounts of gold coins, they hope to kill more opponents. Now, the problem is: does Pirate A has a way to save his life and get as much gold as possible? Reverse reasoningAt first glance, regardless of how A makes a proposal, both B and C may be dissatisfied about it, and thus vote and kill A. Therefore A is in danger. But this problem cannot be simply based on feelings, but requires reverse reasoning. CSuppose that A and B are voted and killed for bad proposals. Now only C is alive. There is no doubt, in this situation, C is the final winner: C gets all coins and kills all opponents. B and CNow, suppose that only A is voted and killed for his bad proposal, and B and C are still alive. Considering that B is smart enough, and cautious and greedy, hence he want to live and of course he doesn’t want C to get all coins. However, no matter regardless of how B makes a proposal, C will vote for ‘NO’ and kill B, even if B decides to give all coins to C. Hence, if B wants to live, he can not let A die. A, B, and COkay, now we are back to the original issue. A is also smart, cautious, and greedy. Hence, A is able to reason the conclusion that is concluded by B. As a consequence, no matter how harsh the proposal is, B will have to approve it to protect himself — even if A gives nothing to B. Having support from B, all possible proposals presented by A will be passed, and A will neve be voted and killed. ConclusionA could choose to have all coins, and B will inevitably approve the proposal of A for preserving himself. In this situation, the willing of C is neglectable. The upshot of the game is A will live and get all coins. ExtensionsNow, suppose that there is another pirate, say M, presents his proposal before A. What will happen? Following the same logic of reverse reasoning. If M is voted and killed, the issue downgraded to the original problem. In this case, A gets all coins, while B and C gets nothing. All pirates are able to foresee this upshot. Hence, for M, he wants to perseve his life, and for B and C, they want to get more coins, the following proposal will be approved by M, B, and C: M gets all 98 coins, and B and C get 1 coin, respectively. In this situation, A gets nothing. Essentials and models of the Pirate’s issueThe pirate’s issue models the darkness of the world, based on the evil of human nature. In this issue, all essentials have their counterparts in real world. Therefore, this issue could reflect many problems in real world. the pirate’s issue real world order of proposals order of the right to speak the god of pirates lows and conventions gold coins (various forms of) benefit vote vote coin assignment benefit distribution proposal of coin assignment scheme of benefit distribution order of proposals and vote to kill people with different right to speak have equal voting rights Advantages of first moversIn both the original issue and the extended one, the pirate presented first becomes the final winner. These kind of phenomena are called advantages of first movers. The one who has advantages of first movers could weigh the minds of various stakeholders and then decide a scheme of benefit distribution and get the most benefit. Pull and Please the bottom layerIn the extended version of pirates’ game, M is not able to get all coins, like what A could do in the original issue. This is because though pirates have different right to speak, but they have equal right to vote, which actually forms a check and balance on the first mover advantage. Therefore, to save himself, M will have to pull and please B and C, the bottom layer in this game, and gain their support, to win the vote. On the other hand, since the right to speak of B and C are the lowest in the case, in a sense, they are the pelple in ‘worst situation’. And thus, they are the people who are the easiest to be pulled and pleased (short-sighted and being satisfied with very few benifits). Trump’s campaign for the US president is based on this strategy. Behind slogans like, ‘make America Freat Again’, ‘American First’, and ‘Reduce Unemployment’, Trump tried to pull and please a large number of people at the bottom. Therefore, in fact, he only needs to pay a small amount of benefits to the bottom people, and he can get a lot of votes to support – even won a lot of traditional blue states, and ultimately win the election. Unite together for resistanceIn the extended version of the game, the most embarrassing pirate is A, since he had been able to get all 100 gold coins. The reduction of the right to speak makes him lose his advantages of first movers; while on the other hand, his right to speak is not low enough, which lets him lose the value of being pulled and pleased – it costs much but gain little votes. This kind of people are the most embarrassing ones when facing benefit distribution. Now, the question is, does A have any chance to win? The solution is unite B and C together for resistance. However, is this strategy works fine every time? Well, the analysis of this question is far too dark, and you might analyse it by yourself. : )]]></content>
      <categories>
        <category>Mathematics and Natural Sciences</category>
      </categories>
      <tags>
        <tag>Game Theory</tag>
      </tags>
  </entry>
</search>
