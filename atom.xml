<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Begin-End</title>
  
  <subtitle>Don&#39;t forget your initial heart.</subtitle>
  <link href="/en/atom.xml" rel="self"/>
  
  <link href="https://liam.page/en/"/>
  <updated>2023-02-16T15:10:41.078Z</updated>
  <id>https://liam.page/en/</id>
  
  <author>
    <name>Liam Huang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Fix battery usage graph on iOS 14.5.1/unc0ver 8.0.2</title>
    <link href="https://liam.page/en/2023/02/15/fix-battery-usage-graph-on-iOS-14-5-1-unc0ver-8-0-2/"/>
    <id>https://liam.page/en/2023/02/15/fix-battery-usage-graph-on-iOS-14-5-1-unc0ver-8-0-2/</id>
    <published>2023-02-15T12:28:47.000Z</published>
    <updated>2023-02-16T15:10:41.078Z</updated>
    
    <content type="html"><![CDATA[<p>The iOS 14.5.1 on hand has been unable to load battery usage information correctly since it was jailbroken with unc0ver 8.0.2. Today I finally couldn&#39;t stand this issue anymore and resolved it.</p><span id="more"></span><h2 id="Cause"><a href="#Cause" class="headerlink" title="Cause"></a>Cause</h2><p>After some research, the cause of the issue was found in <a href="https://github.com/LinusHenze/Fugu14/pull/242#issue-1242075829">this post</a> by <a href="https://github.com/SongXiaoXi">@SongXiaoXi</a>. Specifically, during the jailbreak process, Fugu14 changed the username from <code>_analyticsd</code> to <code>_nanalyticsd</code>, but kept the ID and <code>$HOME</code> unchanged. However, a subsequent daemon changed the owner of <code>/private/var/db/analyticsd</code> and its subdirectories to <code>_analyticsd</code> (ID changed to <code>264</code>). This caused <code>_analyticsd.back</code> to be unable to read the database information under <code>/private/var/db/analyticsd</code> when started with <code>263</code>, resulting in the inability to render battery usage information.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>The solution is also very simple. I wrote a tweak to do all the work for you. You need to add the following two sources, then search and install <code>FixBatteryUsageFugu14</code>:</p><ul><li><code>https://liam.page/apt/</code></li><li><code>https://liam.page/apt-beta/</code></li></ul><p>The tweak will execute some shell commands each time SpringBoard starts.</p><blockquote><p>You can also manually execute these commands to observe their effects. But please make sure you know what each step is doing before you proceed.</p><p>First, you need to install the <code>file-cmds</code> package in a package manager such as Cydia&#x2F;Zebra. It provides the <code>chflags</code> command. (Alternatively, advanced users may consider installing <a href="http://newosxbook.com/tools/iOSBinaries.html"><code>binpack64</code></a>).</p><p>Then, you need to execute the following commands in the iOS command line (or SSH into it).</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /var/mobile/Containers/Data/Fugu14Untether/Library/Caches/com.apple.dyld/</span><br><span class="line"><span class="built_in">ls</span> -l</span><br><span class="line">sudo chflags -v noschg,nouchg *.closure</span><br><span class="line">sudo <span class="built_in">chown</span> 263:263 *.closure</span><br><span class="line">sudo chflags -v schg,uchg *.closure</span><br><span class="line"><span class="built_in">ls</span> -l</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /var/mobile/Containers/Data/Fugu14Untether</span><br><span class="line"><span class="built_in">ls</span> -l</span><br><span class="line">sudo <span class="built_in">chown</span> -h 263:263 /var/mobile/Containers/Data/Fugu14Untether/Library <span class="comment"># Only modify the owner of the Library symlink.</span></span><br><span class="line"><span class="built_in">ls</span> -l</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /var/db</span><br><span class="line"><span class="built_in">ls</span> -l</span><br><span class="line">sudo <span class="built_in">chown</span> -R 263:263 /var/db/analyticsd/</span><br><span class="line"><span class="built_in">ls</span> -l</span><br><span class="line"></span><br><span class="line">sudo launchctl stop com.apple.analyticsd</span><br><span class="line"><span class="built_in">sleep</span> 3</span><br><span class="line">sudo launchctl start com.apple.analyticsd</span><br></pre></td></tr></table></figure></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The iOS 14.5.1 on hand has been unable to load battery usage information correctly since it was jailbroken with unc0ver 8.0.2. Today I finally couldn&amp;#39;t stand this issue anymore and resolved it.&lt;/p&gt;
    
    </summary>
    
      <category term="Jailbreak and Reverse Engineering" scheme="https://liam.page/en/categories/Jailbreak-and-Reverse-Engineering/"/>
    
    
      <category term="Fixing" scheme="https://liam.page/en/tags/Fixing/"/>
    
  </entry>
  
  <entry>
    <title>Fixing App Crash Caused by Missing Python 2.7 on macOS Monterey 12.3</title>
    <link href="https://liam.page/en/2022/04/01/fix-missing-Python2-7-on-macOS-Monterey-12-3/"/>
    <id>https://liam.page/en/2022/04/01/fix-missing-Python2-7-on-macOS-Monterey-12-3/</id>
    <published>2022-04-01T04:10:06.000Z</published>
    <updated>2022-06-20T04:48:09.931Z</updated>
    
    <content type="html"><![CDATA[<p>After updating OS to the latest macOS Monterey 12.3, some of my Apps crashes immediately on starting up. In detail log info, the dynamic linker reported that Python 2.7 is missing, with the following error:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Termination Reason: Namespace DYLD, Code 1 Library missing</span><br><span class="line">Library not loaded: /System/Library/Frameworks/Python.framework/Versions/2.7/Python</span><br><span class="line">Referenced from: /Applications/CHIRP.app/Contents/CHIRP</span><br><span class="line">Reason: tried: &#x27;/System/Library/Frameworks/Python.framework/Versions/2.7/Python&#x27; (no such file), &#x27;/Library/Frameworks/Python.framework/Versions/2.7/Python&#x27; (no such file)</span><br></pre></td></tr></table></figure><p>According to Apple&#39;s <a href="https://developer.apple.com/documentation/macos-release-notes/macos-12_3-release-notes#Python">release note</a>, Python 2.7 has been removed since macOS Monterey 12.3. This is the reason of the crashes. Considering that some of the latest version of these Apps still depend on Python 2.7, we&#39;ll have to install it manually. <a href="https://www.python.org/ftp/python/2.7.18/python-2.7.18-macosx10.9.pkg">Python 2.7.18</a> could be found at the official site of Python. Download and install it, and these crashes shall then be fixed.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;After updating OS to the latest macOS Monterey 12.3, some of my Apps crashes immediately on starting up. In detail log info, the dynamic 
      
    
    </summary>
    
      <category term="Computer Skills" scheme="https://liam.page/en/categories/Computer-Skills/"/>
    
    
      <category term="macOS" scheme="https://liam.page/en/tags/macOS/"/>
    
      <category term="Monterey" scheme="https://liam.page/en/tags/Monterey/"/>
    
      <category term="Python" scheme="https://liam.page/en/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Loading HDFS Folder as a Partition of Hive External Table without Data Moving</title>
    <link href="https://liam.page/en/2019/11/05/connect-HDFS-data-into-Hive-external-table-without-redundant-movement/"/>
    <id>https://liam.page/en/2019/11/05/connect-HDFS-data-into-Hive-external-table-without-redundant-movement/</id>
    <published>2019-11-04T23:38:07.000Z</published>
    <updated>2020-03-02T14:20:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hive is a great bigdata tool for the capability of translating SQL querying into a series of Map-Reduce tasks. In some cases, loading data into Hive becomes an issue to be solved. A tipical situation comes as followed: a large amount of structed data was generated by some process and was saved on HDFS, and now, you are finding a way to build database upon the mentioned data, and thus it could be handled by SQL querying. The problem is that, due to the big volume of data, the high cost of moving data from the birth place to Hive data directory could be ineluctable.</p><p>In the following parts of this post, a practical solution would be presented.</p><span id="more"></span><h2 id="the-Generation-of-Data"><a href="#the-Generation-of-Data" class="headerlink" title="the Generation of Data"></a>the Generation of Data</h2><p>First of all, you&#39;ll have to dump your data onto HDFS with a specific structed format.</p><p>For example, I dumped GZip-ed, tab-sperating, 4-column data, generated by Spark Streaming tasks, to HDFS location: <code>hdfs://namenode/path/to/data/&lt;date&gt;/&lt;hour&gt;/&lt;dstreamid&gt;</code>. Here, <code>&lt;date&gt;</code> and <code>&lt;hour&gt;</code> is the date and hour of generating, respectively, and <code>&lt;dstreamid&gt;</code> is the ID of Direct Stream of Spark Streaming. As a consequence, the structure of folder shall be similar to that listed below:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hdfs://namenode/path/to/data/2019-11-01/13/123456/_SUCCESS</span><br><span class="line">hdfs://namenode/path/to/data/2019-11-01/13/123456/part-00000.gz</span><br><span class="line">hdfs://namenode/path/to/data/2019-11-01/13/123456/part-00001.gz</span><br><span class="line">hdfs://namenode/path/to/data/2019-11-01/13/123456/part-00002.gz</span><br><span class="line">hdfs://namenode/path/to/data/2019-11-01/13/123456/part-00003.gz</span><br><span class="line">hdfs://namenode/path/to/data/2019-11-01/13/123456/part-00004.gz</span><br><span class="line">hdfs://namenode/path/to/data/2019-11-01/13/123456/part-00005.gz</span><br></pre></td></tr></table></figure><h2 id="Creating-Hive-Table"><a href="#Creating-Hive-Table" class="headerlink" title="Creating Hive Table"></a>Creating Hive Table</h2><p>Having data on HDFS folder, we are going to build a Hive table which is compatible with the format of data. For the reason that data moving while loading data into Hive table is not expected, an external table shall be created.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">EXTERNAL</span> <span class="keyword">TABLE</span> `table_name` (</span><br><span class="line">  `field_1` string,</span><br><span class="line">  `field_2` string,</span><br><span class="line">  `field_3` string,</span><br><span class="line">  `field_4` string)</span><br><span class="line">PARTITIONED <span class="keyword">BY</span> (</span><br><span class="line">  `<span class="type">date</span>` string,</span><br><span class="line">  `<span class="keyword">hour</span>` string,</span><br><span class="line">  `dstreamid` string)</span><br><span class="line"><span class="type">ROW</span> FORMAT SERDE</span><br><span class="line">  <span class="string">&#x27;org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe&#x27;</span></span><br><span class="line"><span class="keyword">WITH</span> SERDEPROPERTIES (</span><br><span class="line">  <span class="string">&#x27;field.delim&#x27;</span><span class="operator">=</span><span class="string">&#x27;\t&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;serialization.format&#x27;</span><span class="operator">=</span><span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">STORED <span class="keyword">AS</span> INPUTFORMAT</span><br><span class="line">  <span class="string">&#x27;org.apache.hadoop.mapred.TextInputFormat&#x27;</span></span><br><span class="line">OUTPUTFORMAT</span><br><span class="line">  <span class="string">&#x27;org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat&#x27;</span></span><br><span class="line">LOCATION</span><br><span class="line">  <span class="string">&#x27;hdfs://namenode/path/to/data/&#x27;</span>;</span><br></pre></td></tr></table></figure><p>Here:</p><ul><li>there are four fields named from <code>field_1</code> to <code>field_4</code> (you can modify them on demand);</li><li>there are three fields used for partition, and they are <code>date</code>&#x2F;<code>hour</code>&#x2F;<code>dstreamid</code>; normally, they should be consist to the sub-folder name when saving data onto HDFS;</li><li>field delimiter is <code>\t</code>, i.e. tab seperator;</li><li>the format of input is <code>org.apache.hadoop.mapred.TextInputFormat</code>;</li><li>the location of data of this partition is <code>hdfs://namenode/path/to/data/</code>, the full HDFS path of respective data;</li><li>the name of table is <code>table_name</code>, which could be modified on demand.</li></ul><h2 id="Loading-Data-into-Hive-Table"><a href="#Loading-Data-into-Hive-Table" class="headerlink" title="Loading Data into Hive Table"></a>Loading Data into Hive Table</h2><p>Having date generated and table created, we are well prepared to loading data into table. Here, <code>ALTER TABLE</code> clause will be applied.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span></span><br><span class="line">  table_name</span><br><span class="line"><span class="keyword">ADD</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="keyword">PARTITION</span></span><br><span class="line">  (dt<span class="operator">=</span><span class="string">&#x27;2019-11-01&#x27;</span>, <span class="keyword">hour</span><span class="operator">=</span><span class="string">&#x27;13&#x27;</span>, dstreamid<span class="operator">=</span><span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line">LOCATION</span><br><span class="line">  <span class="string">&#x27;hdfs://namenode/path/to/data/2019-11-01/13/123456&#x27;</span>;</span><br></pre></td></tr></table></figure><p>This instructs Hive to:</p><ul><li>alter the table named <code>table_name</code>;</li><li>add a partition, if the specified partition is not exists currently;</li><li>the location of data specified is <code>hdfs://namenode/path/to/data/2019-11-01/13/123456</code>.</li></ul><p>After execution of the SQL, the HDFS folder is loaded as a partition of Hive external table, without data moving.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hive is a great bigdata tool for the capability of translating SQL querying into a series of Map-Reduce tasks. In some cases, loading data into Hive becomes an issue to be solved. A tipical situation comes as followed: a large amount of structed data was generated by some process and was saved on HDFS, and now, you are finding a way to build database upon the mentioned data, and thus it could be handled by SQL querying. The problem is that, due to the big volume of data, the high cost of moving data from the birth place to Hive data directory could be ineluctable.&lt;/p&gt;
&lt;p&gt;In the following parts of this post, a practical solution would be presented.&lt;/p&gt;
    
    </summary>
    
      <category term="Big Data" scheme="https://liam.page/en/categories/Big-Data/"/>
    
    
      <category term="HDFS" scheme="https://liam.page/en/tags/HDFS/"/>
    
      <category term="Hive" scheme="https://liam.page/en/tags/Hive/"/>
    
  </entry>
  
  <entry>
    <title>Declaration and Definition of Virtual Member Functions in C++</title>
    <link href="https://liam.page/en/2019/01/11/virtual-member-function-declaration-and-definition-in-Cxx/"/>
    <id>https://liam.page/en/2019/01/11/virtual-member-function-declaration-and-definition-in-Cxx/</id>
    <published>2019-01-11T07:51:38.000Z</published>
    <updated>2020-03-02T14:20:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Polymorphism is one of the most important features of OOP. C++ implements polymorphism by the combination of virtual member functions and pointers (references). As a C++ user, of course you know how to use virtual member function and pointers (references) to achive polymorphism. But there might be a fuzzy zone left around these concepts. For example, have you ever think about the following question?</p><blockquote><p>Can a pure virtual function has a implementation?</p></blockquote><p>This post discuss declaration and definition of virtual member functions in C++.</p><span id="more"></span><h2 id="Short-Answer-to-the-Question"><a href="#Short-Answer-to-the-Question" class="headerlink" title="Short Answer to the Question"></a>Short Answer to the Question</h2><p>Yes, we could give a definition of a pure virtual function, and sometimes we must give such a definition. But remember, unlike other member functions, the definition of a pure virtual member function should be implemented outside the definition of the class contains it. (see the example below)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Abstract</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span> </span>= <span class="number">0</span>; <span class="comment">// pure virtual</span></span><br><span class="line">    ~<span class="built_in">Abstract</span>() &#123;</span><br><span class="line">        <span class="comment">// f(); // undefined behavior</span></span><br><span class="line">        Abstract::<span class="built_in">f</span>(); <span class="comment">// OK: non-virtual call</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// definition of the pure virtual function</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Abstract::f</span><span class="params">()</span> </span>&#123; std::cout &lt;&lt; <span class="string">&quot;A::f()\n&quot;</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Concrete</span> : Abstract &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        Abstract::<span class="built_in">f</span>(); <span class="comment">// OK: calls pure virtual function</span></span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Concrete</span>() &#123;</span><br><span class="line">        <span class="built_in">f</span>(); <span class="comment">// OK: calls Concrete::f()</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Virtual-Member-Functions"><a href="#Virtual-Member-Functions" class="headerlink" title="Virtual Member Functions"></a>Virtual Member Functions</h2><p>Here, we begin to discuss the rules about declaration and definition of virtual member functions. According to the C++ standard, a virtual member function declared in the definition of a class must have a definition (implementation). Remember that, when you are trying to give implementation of a virtual member function, you cannot mark <code>virtual</code> again outside the class definition.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;  <span class="comment">// declare and define at the same time, inside the class definition.</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Foo::foo()&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Bar</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">bar</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Bar::bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;Bar::bar()&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>However, this rule is not required to give a diagnose when compiling. That is to say, if the definition of a virtual member function is missing, your compiler may not report an error. However, your linker might report it for referancing undefined symbol.</p><h2 id="Pure-Virtual-Member-Functions"><a href="#Pure-Virtual-Member-Functions" class="headerlink" title="Pure Virtual Member Functions"></a>Pure Virtual Member Functions</h2><p>Pure virtual functions mark classes who contain them as &quot;abstract class&quot;. It means that no objects of an abstract calss could be created, and we cannot use it as parameter types, as function return types, or as the type of an explicit conversion.</p><p>As a result, we&#39;ll never have a chance to call virtual member functions declared in an abstract class from its object. On the other hand, since it&#39;s a pure virtual function and will defintely be overrided in dirved classes. In consquence, in most cases, impl of pure virtual function is useless. Therefore, we can declare a function as pure function and give no definition of it.</p><p>That is to say, for pure virtual member function, we could:</p><ul><li>declare it in class definition, and give no implementation of it;</li><li>declare it in class definition, and do give implementation of it outside the class definition.</li></ul><p>But remember, there are two exceptions.</p><ol><li>for pure virtual destructor, you&#39;ll have to provide a definition.</li><li>the member functions of the derived class are free to call the abstract base&#39;s pure virtual function using qualified function id (<code>Base::some_pure_virtual_function()</code>).</li></ol><p>In these two cases, definition of pure virtual function makes sense.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Polymorphism is one of the most important features of OOP. C++ implements polymorphism by the combination of virtual member functions and pointers (references). As a C++ user, of course you know how to use virtual member function and pointers (references) to achive polymorphism. But there might be a fuzzy zone left around these concepts. For example, have you ever think about the following question?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Can a pure virtual function has a implementation?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This post discuss declaration and definition of virtual member functions in C++.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm and Computer Science" scheme="https://liam.page/en/categories/Algorithm-and-Computer-Science/"/>
    
    
      <category term="C++" scheme="https://liam.page/en/tags/C/"/>
    
      <category term="Virtual Member Function" scheme="https://liam.page/en/tags/Virtual-Member-Function/"/>
    
  </entry>
  
  <entry>
    <title>Popular Romance of Game Theory: the Pirate Dividend issue and Trump&#39;s Campaign</title>
    <link href="https://liam.page/en/2019/01/08/the-Pirate-Dividend-issue-and-Trump-Campaign/"/>
    <id>https://liam.page/en/2019/01/08/the-Pirate-Dividend-issue-and-Trump-Campaign/</id>
    <published>2019-01-08T10:27:38.000Z</published>
    <updated>2020-03-02T14:20:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Starting from this post, we are gonna talking about Game Theory. Thus the name &#39;Popular Romance of Game Theory&#39;. This is the first post of them, and we&#39;ll begin with the Pirate Dividend issue.</p><span id="more"></span><h2 id="The-Pirate-Dividend-issue"><a href="#The-Pirate-Dividend-issue" class="headerlink" title="The Pirate Dividend issue"></a>The Pirate Dividend issue</h2><h3 id="The-issue-decription"><a href="#The-issue-decription" class="headerlink" title="The issue decription"></a>The issue decription</h3><p>The Pirate Dividend issue is decripted as follow:</p><p>Three smart pirates, say <code>A</code>, <code>B</code>, and <code>C</code>, were assigning 100 gold coins robbed. Since there isn&#39;t any agreement about how to assign the coins, they decided to make a division scheme in the following process, which is directed by &#39;the god of pirates&#39;:</p><ul><li>In the order of <code>A</code>, <code>B</code>, and <code>C</code>, a proposal should be presented in turn.</li><li>Those pirates who are still alive, vote on the proposal just proposed:<ul><li>If the proposal is approved by more than half (not included), the proposal will be the scheme, and the game stops;</li><li>Else, the pirate who proposed the proposal will be thrown to the sea to feed sharks, immediately, and the pirates left continue to propose their proposals.</li></ul></li></ul><p>In this game, we suppose that pirates are always cautious and greedy:</p><ul><li>They always want to save their lives first;</li><li>They always want to get as many gold coins as possible;</li><li>In the case of equal amounts of gold coins, they hope to kill more opponents.</li></ul><p>Now, the problem is: does Pirate <code>A</code> has a way to save his life and get as much gold as possible?</p><h3 id="Reverse-reasoning"><a href="#Reverse-reasoning" class="headerlink" title="Reverse reasoning"></a>Reverse reasoning</h3><p>At first glance, regardless of how <code>A</code> makes a proposal, both <code>B</code> and <code>C</code> may be dissatisfied about it, and thus vote and kill <code>A</code>. Therefore <code>A</code> is in danger. But this problem cannot be simply based on feelings, but requires reverse reasoning.</p><h4 id="C"><a href="#C" class="headerlink" title="C"></a><code>C</code></h4><p>Suppose that <code>A</code> and <code>B</code> are voted and killed for bad proposals. Now only <code>C</code> is alive. There is no doubt, in this situation, <code>C</code> is the final winner: <code>C</code> gets all coins and kills all opponents.</p><h4 id="B-and-C"><a href="#B-and-C" class="headerlink" title="B and C"></a><code>B</code> and <code>C</code></h4><p>Now, suppose that only <code>A</code> is voted and killed for his bad proposal, and <code>B</code> and <code>C</code> are still alive.</p><p>Considering that <code>B</code> is smart enough, and cautious and greedy, hence he want to live and of course he doesn&#39;t want <code>C</code> to get all coins. However, no matter regardless of how <code>B</code> makes a proposal, <code>C</code> will vote for &#39;NO&#39; and kill <code>B</code>, even if <code>B</code> decides to give all coins to <code>C</code>. Hence, if <code>B</code> wants to live, he can not let <code>A</code> die.</p><h4 id="A-B-and-C"><a href="#A-B-and-C" class="headerlink" title="A, B, and C"></a><code>A</code>, <code>B</code>, and <code>C</code></h4><p>Okay, now we are back to the original issue.</p><p><code>A</code> is also smart, cautious, and greedy. Hence, <code>A</code> is able to reason the conclusion that is concluded by <code>B</code>. As a consequence, no matter how harsh the proposal is, <code>B</code> will have to approve it to protect himself --- even if <code>A</code> gives nothing to <code>B</code>. Having support from <code>B</code>, all possible proposals presented by <code>A</code> will be passed, and <code>A</code> will neve be voted and killed.</p><h4 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h4><p><code>A</code> could choose to have all coins, and <code>B</code> will inevitably approve the proposal of <code>A</code> for preserving himself. In this situation, the willing of <code>C</code> is neglectable. The upshot of the game is <code>A</code> will live and get all coins.</p><h2 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h2><p>Now, suppose that there is another pirate, say <code>M</code>, presents his proposal before <code>A</code>. What will happen?</p><p>Following the same logic of reverse reasoning. If <code>M</code> is voted and killed, the issue downgraded to the original problem. In this case, <code>A</code> gets all coins, while <code>B</code> and <code>C</code> gets nothing. All pirates are able to foresee this upshot. Hence, for <code>M</code>, he wants to perseve his life, and for <code>B</code> and <code>C</code>, they want to get more coins, the following proposal will be approved by <code>M</code>, <code>B</code>, and <code>C</code>: <code>M</code> gets all 98 coins, and <code>B</code> and <code>C</code> get 1 coin, respectively. In this situation, <code>A</code> gets nothing.</p><h2 id="Essentials-and-models-of-the-Pirate-39-s-issue"><a href="#Essentials-and-models-of-the-Pirate-39-s-issue" class="headerlink" title="Essentials and models of the Pirate&#39;s issue"></a>Essentials and models of the Pirate&#39;s issue</h2><p>The pirate&#39;s issue models the darkness of the world, based on the evil of human nature. In this issue, all essentials have their counterparts in real world. Therefore, this issue could reflect many problems in real world.</p><table><thead><tr><th>the pirate&#39;s issue</th><th>real world</th></tr></thead><tbody><tr><td>order of proposals</td><td>order of the right to speak</td></tr><tr><td>the god of pirates</td><td>lows and conventions</td></tr><tr><td>gold coins</td><td>(various forms of) benefit</td></tr><tr><td>vote</td><td>vote</td></tr><tr><td>coin assignment</td><td>benefit distribution</td></tr><tr><td>proposal of coin assignment</td><td>scheme of benefit distribution</td></tr><tr><td>order of proposals and vote to kill</td><td>people with different right to speak have equal voting rights</td></tr></tbody></table><h3 id="Advantages-of-first-movers"><a href="#Advantages-of-first-movers" class="headerlink" title="Advantages of first movers"></a>Advantages of first movers</h3><p>In both the original issue and the extended one, the pirate presented first becomes the final winner. These kind of phenomena are called advantages of first movers. The one who has advantages of first movers could weigh the minds of various stakeholders and then decide a scheme of benefit distribution and get the most benefit.</p><h3 id="Pull-and-Please-the-bottom-layer"><a href="#Pull-and-Please-the-bottom-layer" class="headerlink" title="Pull and Please the bottom layer"></a>Pull and Please the bottom layer</h3><p>In the extended version of pirates&#39; game, <code>M</code> is not able to get all coins, like what <code>A</code> could do in the original issue. This is because though pirates have different right to speak, but they have equal right to vote, which actually forms a check and balance on the first mover advantage. Therefore, to save himself, <code>M</code> will have to pull and please <code>B</code> and <code>C</code>, the bottom layer in this game, and gain their support, to win the vote.</p><p>On the other hand, since the right to speak of <code>B</code> and <code>C</code> are the lowest in the case, in a sense, they are the pelple in &#39;worst situation&#39;. And thus, they are the people who are the easiest to be pulled and pleased (short-sighted and being satisfied with very few benifits).</p><p>Trump’s campaign for the US president is based on this strategy. Behind slogans like, &#39;make America Freat Again&#39;, &#39;American First&#39;, and &#39;Reduce Unemployment&#39;, Trump tried to pull and please a large number of people at the bottom. Therefore, in fact, he only needs to pay a small amount of benefits to the bottom people, and he can get a lot of votes to support -- even won a lot of traditional blue states, and ultimately win the election.</p><h3 id="Unite-together-for-resistance"><a href="#Unite-together-for-resistance" class="headerlink" title="Unite together for resistance"></a>Unite together for resistance</h3><p>In the extended version of the game, the most embarrassing pirate is <code>A</code>, since he had been able to get all 100 gold coins. The reduction of the right to speak makes him lose his advantages of first movers; while on the other hand, his right to speak is not low enough, which lets him lose the value of being pulled and pleased -- it costs much but gain little votes. This kind of people are the most embarrassing ones when facing benefit distribution.</p><p>Now, the question is, does <code>A</code> have any chance to win? The solution is unite <code>B</code> and <code>C</code> together for resistance. However, is this strategy works fine every time? Well, the analysis of this question is far too dark, and you might analyse it by yourself. <code>: )</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Starting from this post, we are gonna talking about Game Theory. Thus the name &amp;#39;Popular Romance of Game Theory&amp;#39;. This is the first post of them, and we&amp;#39;ll begin with the Pirate Dividend issue.&lt;/p&gt;
    
    </summary>
    
      <category term="Mathematics and Natural Sciences" scheme="https://liam.page/en/categories/Mathematics-and-Natural-Sciences/"/>
    
    
      <category term="Game Theory" scheme="https://liam.page/en/tags/Game-Theory/"/>
    
  </entry>
  
</feed>
